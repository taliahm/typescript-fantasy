[{"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/index.js":"1","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/App.js":"2","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/reportWebVitals.js":"3","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Login.tsx":"4","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/SignUp.js":"5","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Main.js":"6","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Team.js":"7","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/User.js":"8","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/rules.js":"9","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Rule.js":"10","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/CreateLeague.tsx":"11","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/EditTeam.tsx":"12","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Episodes.tsx":"13","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/FindLeague.tsx":"14","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/LeagueSwitcher.tsx":"15","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Player.tsx":"16","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/types/player.ts":"17","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/sort.ts":"18","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/TeamStats.tsx":"19","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Players.tsx":"20"},{"size":503,"mtime":1607964108472,"results":"21","hashOfConfig":"22"},{"size":3073,"mtime":1607972731855,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1604517536719,"results":"24","hashOfConfig":"22"},{"size":997,"mtime":1607965081731,"results":"25","hashOfConfig":"22"},{"size":1307,"mtime":1607963596240,"results":"26","hashOfConfig":"22"},{"size":4905,"mtime":1607974006341,"results":"27","hashOfConfig":"22"},{"size":2998,"mtime":1607973042187,"results":"28","hashOfConfig":"22"},{"size":1938,"mtime":1607963607071,"results":"29","hashOfConfig":"22"},{"size":329,"mtime":1604529276244,"results":"30","hashOfConfig":"22"},{"size":1364,"mtime":1607963662619,"results":"31","hashOfConfig":"22"},{"size":1053,"mtime":1607972854165,"results":"32","hashOfConfig":"22"},{"size":3891,"mtime":1607980115232,"results":"33","hashOfConfig":"22"},{"size":1024,"mtime":1607974049567,"results":"34","hashOfConfig":"22"},{"size":1501,"mtime":1607968432850,"results":"35","hashOfConfig":"22"},{"size":623,"mtime":1607972709157,"results":"36","hashOfConfig":"22"},{"size":2671,"mtime":1607980272660,"results":"37","hashOfConfig":"22"},{"size":229,"mtime":1607973853929,"results":"38","hashOfConfig":"22"},{"size":2642,"mtime":1607980617011,"results":"39","hashOfConfig":"22"},{"size":5836,"mtime":1607981316694,"results":"40","hashOfConfig":"22"},{"size":5565,"mtime":1607980926616,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1fybw61",{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/index.js",[],["88","89"],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/App.js",["90"],"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport Main from './components/Main';\nimport LeagueSwitcher from './components/LeagueSwitcher.tsx';\n\nimport Signup from './components/SignUp';\nimport Login from './components/Login.tsx';\n\nimport './App.css';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  \n  const [leagueId, setLeagueId] = useState(null);\n  const [team, setTeam] = useState(null);\n  const [leagues, setLeagues] = useState([]);\n  const [teams, setTeams] = useState([]);\n  const [editRules, setEditRules] = useState(false);\n  const fetchMe = useCallback(async function() {\n    const response = await axios.get('/api/me');\n        // THIS NEEDS TO BE LEAGUE ID\n        const leagueId = response.data.teams.length === 0 ? null : response.data.teams[0].league._id;\n        const leagues = response.data.teams.map((t) => {\n          return t.league;\n        })\n        const editRules =\n          response.data.teams.length === 0\n            ? null\n            : response.data.teams[0].league.useCustomScores;\n        setUser(response.data);\n        setLeagueId(leagueId);\n        setTeam(response.data.teams[0]);\n        setTeams(response.data.teams);\n        setLeagues(leagues);\n        setEditRules(editRules);\n  }, []);\n  useEffect(() => {\n      fetchMe();\n  }, [fetchMe]);\n\n  useEffect(() => {\n    const currentTeam = teams.filter(t => {\n      return t.league._id === leagueId;\n    })\n    const league = leagues.filter(l => l._id === leagueId)[0];\n    setEditRules(league?.useCustomScores);\n    if (teams.length !== 0) {\n      setTeam(currentTeam[0]);\n    }\n\n  }, [leagueId])\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav>\n            <ul></ul>\n          </nav>\n          <h1>Your Fantasy League</h1>\n        </header>\n            <Route\n              path=\"/login\"\n              render={() => <Login fetchMe={fetchMe}/>}\n            />\n            <Route\n              path=\"/signup\"\n              render={() => <Signup me={fetchMe} />}\n            />\n          <Route\n            exact\n            to=\"/\"\n            render={() => {\n              if (!user) {\n                return <Redirect to=\"/login\" />;\n              }\n              return (\n                <>\n                  <Redirect to=\"/\" />\n                  {leagues.length > 1 && (\n                    <LeagueSwitcher\n                      setLeagueId={setLeagueId}\n                      leagues={leagues}\n                    />\n                  )}\n                  {team && <h2>{team.name}</h2>}\n                  <Main\n                    user={user}\n                    fetchMe={fetchMe}\n                    updateUser={setUser}\n                    leagueId={leagueId}\n                    team={team}\n                    editRules={editRules}\n                  />\n                </>\n              );\n            } }/>\n  \n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/reportWebVitals.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Login.tsx",[],["91","92"],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/SignUp.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Main.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Team.js",["93"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nfunction Team({ user, updateUser }) {\n  const [name, setName] = useState(\"\");\n  const [players, setPlayers] = useState([]);\n  const [chosenPlayers, setChosenPlayers] = useState([]);\n  const [teamId, setTeamId] = useState(null);\n  const { leagueId } = useParams();\n  const { push } = useHistory();\n  useEffect(() => {\n    const addUserToLeague = async () => {\n      const response = await axios.patch(\n        `http://localhost:3000/api/league/${leagueId}`,\n        {\n          userId: user._id,\n        }\n      );\n      updateUser(response.data);\n    };\n    const hasTeamInLeague = !!user && user.teams?.find(t => {\n      return t.league._id === leagueId\n    });\n\n    // user._id prevents the empty user from getting a team\n    if (!user) return;\n    if (!hasTeamInLeague && user._id) {\n      addUserToLeague();\n    } else if (hasTeamInLeague && user._id) {\n      const team = user.teams.find((t) => t.league === leagueId);\n      setTeamId(team._id);\n    }\n  }, [leagueId, user]);\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      const response = await axios.get(\"http://localhost:3000/api/players\");\n      setPlayers(response.data);\n    };\n    fetchPlayers();\n  }, []);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const team = {\n      players: chosenPlayers,\n      name,\n    };\n    try {\n\n      const response = await axios.patch(`http://localhost:3000/api/user/team/${teamId}`, {\n        ...team,\n        userId: user._id,\n      });\n      updateUser(response.data);\n      push(`/league/stats/${leagueId}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const handleCheckbox = (e) => {\n    const value = e.target.value;\n    if (chosenPlayers.includes(value)) {\n      // REMOVE:\n      const removed = chosenPlayers.filter((id) => id !== value);\n      setChosenPlayers(removed);\n      return;\n    }\n    const newPlayers = [...chosenPlayers, value];\n    setChosenPlayers(newPlayers);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Team Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <section>\n        <h2>Pick your team members!</h2>\n        {players.map((player) => {\n          return (\n            <div key={player._id}>\n              <label htmlFor={player._id}>\n                {player.firstName}\n                {player.lastName}\n              </label>\n              <input\n                onChange={handleCheckbox}\n                value={player._id}\n                id={player._id}\n                type=\"checkbox\"\n                checked={chosenPlayers.includes(player._id)}\n              />\n            </div>\n          );\n        })}\n      </section>\n      <button type=\"submit\">Save Team!</button>\n    </form>\n  );\n}\n\nexport default Team;","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/User.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/rules.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Rule.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/CreateLeague.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/EditTeam.tsx",["94"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\n\nimport Chip from \"@material-ui/core/Chip\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { playersInLeagueNotTaken } from '../utils/sort';\n\nimport { User } from '../types/user';\nimport { Player } from '../types/player';\nimport { Team, TeamWithPlayers } from \"../types/team\";\n\ninterface EditTeamProps {\n  user: User;\n  fetchMe: Function;\n  team: Team;\n}\n\ninterface ParamTypes {\n  leagueId: string;\n}\n// Need ALL the users and their teams in the league, \n// need to get league here with users populated, should just be teams though\nfunction EditTeam({ user, fetchMe, team }:EditTeamProps):JSX.Element {\n  const [name, setName] = useState<string>('');\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [chosenPlayers, setChosenPlayers] = useState<string[]>([]);\n  const [notAvailablePlayers, setNotAvailablePlayers] = useState<Player[]>([]);\n  const [teamId, setTeamId] = useState<string | null>(null);\n  const { leagueId } = useParams<ParamTypes>();\n  useEffect(() => {\n      if (team) {\n          setName(team.name)\n          setChosenPlayers(team.players)\n          setTeamId(team._id);\n      }\n  }, [team])\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      const leagueResponse = await axios.get(`/api/league/${leagueId}`);\n      const notAvailablePlayers = playersInLeagueNotTaken(leagueResponse.data.teams, teamId);\n      setPlayers(leagueResponse.data.playersInSeason);\n      setNotAvailablePlayers(notAvailablePlayers);\n    };\n    fetchPlayers();\n  }, [leagueId, teamId]);\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const newTeam = {\n      players: chosenPlayers,\n      name,\n    };\n    try {\n      await axios.patch(`http://localhost:3000/api/team/${teamId}`, {\n        ...newTeam,\n        userId: user._id,\n      });\n      fetchMe();\n      // TODO: ADD LOADING STUFF\n      //   push(`/league/stats/${leagueId}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const handleCheckbox = (playerId: string) => {\n    const value:string = playerId;\n    if (chosenPlayers.includes(value)) {\n      // REMOVE:\n      const removed = chosenPlayers.filter((id) => id !== value);\n      setChosenPlayers(removed);\n      return;\n    }\n    const newPlayers = [...chosenPlayers, value];\n    setChosenPlayers(newPlayers);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextField\n        label=\"Team Name\"\n        id=\"name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <section>\n        <h2>Pick your team members!</h2>\n        {players.map((player) => {\n          const notAvailable = notAvailablePlayers.find(\n            (p) => p._id === player._id\n          );\n          if (notAvailable) return null;\n          return (\n            <div key={player._id}>\n              <Chip\n                onClick={() => handleCheckbox(player._id)}\n                label={`${player.firstName} ${player.lastName}`}\n                icon={\n                  <CheckIcon\n                    visibility={\n                      chosenPlayers.includes(player._id) ? \"visible\" : \"hidden\"\n                    }\n                  />\n                }\n                clickable\n                color={\n                  chosenPlayers.includes(player._id) ? \"primary\" : \"default\"\n                }\n              />\n            </div>\n          );\n        })}\n        {notAvailablePlayers.map((np) => {\n          console.log(np);\n          return <Chip disabled label={`${np.firstName} ${np.lastName}`} />;\n        })}\n      </section>\n      <Button color=\"primary\" type=\"submit\">Save Team!</Button>\n    </form>\n  );\n}\n\nexport default EditTeam;\n","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Episodes.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/FindLeague.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/LeagueSwitcher.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Player.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/types/player.ts",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/sort.ts",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/TeamStats.tsx",["95"],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Players.tsx",["96","97"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Rule from './Rule';\nimport { normalizeEpisodes } from '../utils/sort';\n\n\n// Material UI\nimport Grid from '@material-ui/core/Grid';\nimport Table from \"@material-ui/core/Table\";\n\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nimport { Score, PlayerWithEpisodes } from \"../types/player\";\n\ninterface PlayersProp {\n  userId: string,\n  ruleSet: Score[],\n  leagueId: string,\n}\n\ninterface PlayersParams {\n  episodeId: string\n}\n\nfunction Players({ userId, ruleSet, leagueId }: PlayersProp): JSX.Element {\n    const [players, setPlayers] = useState<PlayerWithEpisodes[]>([]);\n    const [toUpdate, setToUpdate] = useState(false);\n    const { episodeId } = useParams<PlayersParams>();\n      useEffect(() => {\n        const fetchData = async () => {\n          const response = await axios.get(`http://localhost:3000/api/players?leagueId=${leagueId}`);\n\n          const episodeSorted = normalizeEpisodes(response.data, leagueId);\n          setPlayers(episodeSorted);\n        };\n        fetchData();\n      }, [toUpdate, leagueId]);\n      const updateScores = () => {\n        setToUpdate(!toUpdate);\n      }\n\n      const hasRule = (ruleId: string, player: PlayerWithEpisodes) => {\n        return !!getPlayerRuleForEpisode(ruleId, player);\n      }\n\n      const getPlayerRuleForEpisode = (ruleId: string, player: PlayerWithEpisodes) => {\n        const episodeRules = player.sortedScores[`episodeNumber${episodeId}`]; \n        if (!episodeRules) {\n          return null;\n        }\n        return episodeRules.find((cpr) => cpr._id === ruleId);\n      };\n      // const [eliminated, setEliminated] = useState(false);\n      const confirmElimination = async (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        playerId: string,\n        eliminated: boolean\n      ) => {\n        const body = {\n          eliminated,\n          playerId,\n          epNumber: episodeId,\n          pointValue: 0,\n          text: \"Elimination\",\n          leagueId,\n        };\n        const response = await axios.post(\"/api/players/eliminated\", {\n          ...body,\n        });\n        const normalized = normalizeEpisodes(response.data, leagueId);\n        setPlayers(normalized);\n      };\n      return (\n        <section className=\"players\">\n          <h2>Scoring for Episode {episodeId}</h2>\n          <Grid container spacing={2}>\n            {players.map((player) => {\n              if (player.isEliminated) return;\n              return (\n                <Grid item key={player._id}>\n                  <h3>\n                    {player.firstName}\n                    {player.lastName}\n                  </h3>\n                  <div>\n                    <button\n                      onClick={(e) => confirmElimination(e, player._id, true)}\n                    >\n                      Eliminate?\n                    </button>\n                    <p>\n                      You won't be able to add points after they've been\n                      eliminated!\n                    </p>\n                  </div>\n                  <TableContainer component={Paper}>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>\n                            Points\n                          </TableCell>\n                          <TableCell>\n                            Rule\n                          </TableCell>\n                          <TableCell>\n                            Count\n                          </TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {ruleSet.map((rule) => (\n                          <Rule\n                            hasRule={hasRule(rule._id, player)}\n                            playerRule={getPlayerRuleForEpisode(\n                              rule._id,\n                              player\n                            )}\n                            key={rule.text}\n                            rule={rule}\n                            epNumber={episodeId}\n                            updateScores={updateScores}\n                            playerId={player._id}\n                            leagueId={leagueId}\n                          />\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </Grid>\n              );\n            })}\n          </Grid>\n          <Grid container spacing={2}>\n            {players.map((player) => {\n              if (!player.isEliminated) return;\n              return (\n                <Grid item key={player._id}>\n                  <h3>\n                    {player.firstName}\n                    {player.lastName}\n                  </h3>\n                  <p>Has this player returned?</p>\n                  <div>\n                    <button\n                      onClick={(e) => confirmElimination(e, player._id, false)}\n                    >\n                      Un-eliminate?\n                    </button>\n                  </div>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </section>\n      );\n}\n\nexport default Players;",{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":57,"column":6,"nodeType":"104","endLine":57,"endColumn":16,"suggestions":"105"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"106","line":35,"column":6,"nodeType":"104","endLine":35,"endColumn":22,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":14,"column":16,"nodeType":"110","messageId":"111","endLine":14,"endColumn":31},{"ruleId":"102","severity":1,"message":"112","line":47,"column":8,"nodeType":"104","endLine":47,"endColumn":10,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":85,"column":40,"nodeType":"116","messageId":"117","endLine":85,"endColumn":47},{"ruleId":"114","severity":1,"message":"115","line":143,"column":41,"nodeType":"116","messageId":"117","endLine":143,"endColumn":48},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'leagues' and 'teams'. Either include them or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'updateUser'. Either include it or remove the dependency array. If 'updateUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["121"],"@typescript-eslint/no-unused-vars","'TeamWithPlayers' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'leagueId'. Either include it or remove the dependency array.",["122"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [leagueId, leagues, teams]",{"range":"129","text":"130"},"Update the dependencies array to be: [leagueId, updateUser, user]",{"range":"131","text":"132"},"Update the dependencies array to be: [leagueId]",{"range":"133","text":"134"},[1723,1733],"[leagueId, leagues, teams]",[1135,1151],"[leagueId, updateUser, user]",[1574,1576],"[leagueId]"]