[{"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/index.js":"1","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/App.js":"2","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/reportWebVitals.js":"3","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Login.tsx":"4","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/SignUp.js":"5","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Main.js":"6","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Team.js":"7","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/User.js":"8","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/rules.js":"9","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Rule.js":"10","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/CreateLeague.tsx":"11","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/EditTeam.tsx":"12","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Episodes.tsx":"13","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/FindLeague.tsx":"14","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/LeagueSwitcher.tsx":"15","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Player.tsx":"16","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/types/player.ts":"17","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/sort.ts":"18","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/TeamStats.tsx":"19","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Players.tsx":"20","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Role.tsx":"21","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/types/user.ts":"22","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/EditUser.tsx":"23","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/CreatePlayer.tsx":"24","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/hooks/useEpisodes.ts":"25"},{"size":503,"mtime":1607964108472,"results":"26","hashOfConfig":"27"},{"size":3196,"mtime":1609274935530,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1604517536719,"results":"29","hashOfConfig":"27"},{"size":997,"mtime":1607965081731,"results":"30","hashOfConfig":"27"},{"size":1307,"mtime":1607963596240,"results":"31","hashOfConfig":"27"},{"size":5963,"mtime":1608760574250,"results":"32","hashOfConfig":"27"},{"size":2998,"mtime":1607973042187,"results":"33","hashOfConfig":"27"},{"size":1938,"mtime":1607963607071,"results":"34","hashOfConfig":"27"},{"size":329,"mtime":1604529276244,"results":"35","hashOfConfig":"27"},{"size":1364,"mtime":1607963662619,"results":"36","hashOfConfig":"27"},{"size":1053,"mtime":1607972854165,"results":"37","hashOfConfig":"27"},{"size":7922,"mtime":1609624845587,"results":"38","hashOfConfig":"27"},{"size":1485,"mtime":1609623397789,"results":"39","hashOfConfig":"27"},{"size":1501,"mtime":1607968432850,"results":"40","hashOfConfig":"27"},{"size":623,"mtime":1607972709157,"results":"41","hashOfConfig":"27"},{"size":2671,"mtime":1607980272660,"results":"42","hashOfConfig":"27"},{"size":229,"mtime":1607973853929,"results":"43","hashOfConfig":"27"},{"size":2882,"mtime":1609277348307,"results":"44","hashOfConfig":"27"},{"size":6613,"mtime":1609624073446,"results":"45","hashOfConfig":"27"},{"size":5565,"mtime":1607980926616,"results":"46","hashOfConfig":"27"},{"size":317,"mtime":1608135574289,"results":"47","hashOfConfig":"27"},{"size":266,"mtime":1608156413921,"results":"48","hashOfConfig":"27"},{"size":3933,"mtime":1608759567774,"results":"49","hashOfConfig":"27"},{"size":950,"mtime":1608158538376,"results":"50","hashOfConfig":"27"},{"size":549,"mtime":1609623946947,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1fybw61",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"54"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/index.js",[],["110","111"],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/App.js",["112"],"import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport axios from 'axios';\n\nimport Main from './components/Main';\nimport LeagueSwitcher from './components/LeagueSwitcher.tsx';\n\n\nimport Signup from './components/SignUp';\nimport Login from './components/Login.tsx';\n\nimport './App.css';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  \n  const [leagueId, setLeagueId] = useState(null);\n  const [team, setTeam] = useState(null);\n  const [leagues, setLeagues] = useState([]);\n  const [teams, setTeams] = useState([]);\n  const [editRules, setEditRules] = useState(false);\n  const fetchMe = useCallback(async function() {\n    const response = await axios.get('/api/me');\n    console.log(response.data);\n        // THIS NEEDS TO BE LEAGUE ID\n        const leagueId = response.data.teams.length === 0 ? null : response.data.teams[0].league._id;\n        console.log(leagueId);\n        const leagues = response.data.teams.map((t) => {\n          return t.league;\n        })\n        const editRules =\n          response.data.teams.length === 0\n            ? null\n            : response.data.teams[0].league.useCustomScores;\n        setUser(response.data);\n        setLeagueId(leagueId);\n        // this is WRONG, needs to be the team for the league\n        setTeam(response.data.teams[0]);\n        setTeams(response.data.teams);\n        setLeagues(leagues);\n        setEditRules(editRules);\n  }, []);\n  useEffect(() => {\n      fetchMe();\n  }, [fetchMe]);\n\n  useEffect(() => {\n    const currentTeam = teams.filter(t => {\n      return t.league._id === leagueId;\n    })\n    const league = leagues.filter(l => l._id === leagueId)[0];\n    setEditRules(league?.useCustomScores);\n    if (teams.length !== 0) {\n      setTeam(currentTeam[0]);\n    }\n\n  }, [leagueId])\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <nav>\n            <ul></ul>\n          </nav>\n          <h1>Your Fantasy League</h1>\n        </header>\n            <Route\n              path=\"/login\"\n              render={() => <Login fetchMe={fetchMe}/>}\n            />\n            <Route\n              path=\"/signup\"\n              render={() => <Signup me={fetchMe} />}\n            />\n          <Route\n            exact\n            to=\"/\"\n            render={() => {\n              if (!user) {\n                return <Redirect to=\"/login\" />;\n              }\n              return (\n                <>\n                  <Redirect to=\"/\" />\n                  {leagues.length > 1 && (\n                    <LeagueSwitcher\n                      setLeagueId={setLeagueId}\n                      leagues={leagues}\n                    />\n                  )}\n                  {team && <h2>{team.name}</h2>}\n                  <Main\n                    user={user}\n                    fetchMe={fetchMe}\n                    updateUser={setUser}\n                    leagueId={leagueId}\n                    team={team}\n                    editRules={editRules}\n                  />\n                </>\n              );\n            } }/>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/reportWebVitals.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Login.tsx",[],["113","114"],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/SignUp.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Main.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Team.js",["115"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\n\nfunction Team({ user, updateUser }) {\n  const [name, setName] = useState(\"\");\n  const [players, setPlayers] = useState([]);\n  const [chosenPlayers, setChosenPlayers] = useState([]);\n  const [teamId, setTeamId] = useState(null);\n  const { leagueId } = useParams();\n  const { push } = useHistory();\n  useEffect(() => {\n    const addUserToLeague = async () => {\n      const response = await axios.patch(\n        `http://localhost:3000/api/league/${leagueId}`,\n        {\n          userId: user._id,\n        }\n      );\n      updateUser(response.data);\n    };\n    const hasTeamInLeague = !!user && user.teams?.find(t => {\n      return t.league._id === leagueId\n    });\n\n    // user._id prevents the empty user from getting a team\n    if (!user) return;\n    if (!hasTeamInLeague && user._id) {\n      addUserToLeague();\n    } else if (hasTeamInLeague && user._id) {\n      const team = user.teams.find((t) => t.league === leagueId);\n      setTeamId(team._id);\n    }\n  }, [leagueId, user]);\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      const response = await axios.get(\"http://localhost:3000/api/players\");\n      setPlayers(response.data);\n    };\n    fetchPlayers();\n  }, []);\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const team = {\n      players: chosenPlayers,\n      name,\n    };\n    try {\n\n      const response = await axios.patch(`http://localhost:3000/api/user/team/${teamId}`, {\n        ...team,\n        userId: user._id,\n      });\n      updateUser(response.data);\n      push(`/league/stats/${leagueId}`);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const handleCheckbox = (e) => {\n    const value = e.target.value;\n    if (chosenPlayers.includes(value)) {\n      // REMOVE:\n      const removed = chosenPlayers.filter((id) => id !== value);\n      setChosenPlayers(removed);\n      return;\n    }\n    const newPlayers = [...chosenPlayers, value];\n    setChosenPlayers(newPlayers);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Team Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <section>\n        <h2>Pick your team members!</h2>\n        {players.map((player) => {\n          return (\n            <div key={player._id}>\n              <label htmlFor={player._id}>\n                {player.firstName}\n                {player.lastName}\n              </label>\n              <input\n                onChange={handleCheckbox}\n                value={player._id}\n                id={player._id}\n                type=\"checkbox\"\n                checked={chosenPlayers.includes(player._id)}\n              />\n            </div>\n          );\n        })}\n      </section>\n      <button type=\"submit\">Save Team!</button>\n    </form>\n  );\n}\n\nexport default Team;","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/User.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/rules.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Rule.js",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/CreateLeague.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/EditTeam.tsx",["116","117","118"],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Episodes.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/FindLeague.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/LeagueSwitcher.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Player.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/types/player.ts",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/utils/sort.ts",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/TeamStats.tsx",["119","120"],"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { normalizeEpisodes } from \"../utils/sort\";\n\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Table from \"@material-ui/core/Table\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport Grid from '@material-ui/core/Grid';\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nimport { useEpisodes } from '../hooks/useEpisodes';\n\nimport { User } from '../types/user';\nimport { PlayerWithEpisodes } from '../types/player';\nimport { TeamWithPlayersWithScores } from '../types/team';\nimport { episode } from '../types/episodes';\n\ninterface TeamStatsProps {\n  user: User,\n}\n\ninterface TeamStatsParams {\n  leagueId: string\n}\n\nconst seasonId = \"5fa306ffcd21f61bcc9e464b\";\n\nfunction TeamStats({ user }:TeamStatsProps): JSX.Element {\n    const [players, setPlayers] = useState<PlayerWithEpisodes[]>([]);\n    const [sortedTeams, setSortedTeams] = useState<TeamWithPlayersWithScores[]>(\n      []\n    );\n    const episodes = useEpisodes(seasonId);\n    console.log(episodes);\n    const { leagueId } = useParams<TeamStatsParams>();\n    useEffect(() => {\n        const fetchData = async () => {\n        const response = await axios.get(\n            \"http://localhost:3000/api/players\"\n        );\n        \n        const teamsWithTotals = await axios.get(`/api/team/${leagueId}`)\n        console.log(teamsWithTotals);\n        const episodeSorted = normalizeEpisodes(response.data, leagueId);\n        console.log(episodeSorted);\n        setSortedTeams(teamsWithTotals.data.sorted);\n        setPlayers(episodeSorted);\n        };\n      \n        fetchData();\n    }, []);\n    \n \n    const renderByEpisodeTableRows = (players: PlayerWithEpisodes[]) => {\n      if (players.length === 0) return null;\n      return episodes.map((ep) => {\n        return (\n          <TableRow>\n            <TableCell>{ep.number}</TableCell>\n            {players.map((player) => {\n              const episode = player.sortedScores[`episodeNumber${ep.number}`];\n              if (!episode) return <TableCell>0</TableCell>;\n              const total = episode.reduce((accum, curr) => {\n                if (!curr.count) return accum;\n                return accum + curr.pointValue * curr.count || 0;\n              }, 0);\n              const isEliminated = episode.find((e) => e.eliminated === true);\n              if (!!isEliminated) {\n                return (\n                  <TableCell>\n                    {total}\n                    <p>Eliminated!</p>\n                  </TableCell>\n                );\n              }\n              return <TableCell>{total}</TableCell>;\n            })}\n          </TableRow>\n        );\n      })\n    };\n    const renderTotalTableRow = (players: PlayerWithEpisodes[]) => {\n        return (\n            <TableRow>\n                <TableCell>Totals</TableCell>\n                {players.map((player) => {\n                  let sum = 0;\n                  for (let episode in player.sortedScores) {\n                    const arr = player.sortedScores[episode];\n                    const epiTotal = arr.reduce((accum, curr) => {\n                      if (!curr.count) return accum;\n                      return accum + curr.pointValue * (curr.count || 0);\n                    }, 0)\n                    sum = epiTotal + sum;\n                  }\n                    return <TableCell>{sum}</TableCell>;\n                })}\n        </TableRow>\n        )\n    }\n    return (\n      <div>\n        <h2>Team standing:</h2>\n        <Grid container spacing={4}>\n          {sortedTeams.map((team, i) => {\n            return (\n              <Grid item>\n                <Card>\n                  <CardContent>\n                    {i === 0 && <Typography>Current Leader!</Typography>}\n                    {team.isCurrentUserTeam && (\n                      <Typography>Your team!</Typography>\n                    )}\n                    <Typography variant=\"h3\">{team.name}</Typography>\n                    <Typography variant=\"h5\">\n                      <Avatar src={team.userPic} />\n                      {team.userName}\n                    </Typography>\n                    <Typography variant=\"h4\">{team.teamTotal}</Typography>\n                    <TableContainer component=\"div\">\n                      <Table>\n                        <TableHead>\n                          <TableRow>\n                            <TableCell>Episode</TableCell>\n                            <TableCell>Players</TableCell>\n                            <TableCell>Total Points</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {team.episodes.map((episode) => {\n                            return (\n                              <TableRow>\n                                  <TableCell>{episode.number}</TableCell>\n                                  <TableCell>{episode.players.map((pl, i, arr) => `${pl.firstName}${i === arr.length - 1 ? '' : ', ' }`)}</TableCell>\n                                  <TableCell>{episode.total}</TableCell>\n                              </TableRow>\n                            )\n                          })}\n                        </TableBody>\n                      </Table>\n                    </TableContainer>\n                  </CardContent>\n                </Card>\n              </Grid>\n            );\n          })}\n        </Grid>\n        <h2>Overall Standings</h2>\n        <TableContainer>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Episode</TableCell>\n                {players.map((player) => {\n                  return (\n                    <TableCell>\n                      <Link to={`/league/${leagueId}/player/${player._id}`}>\n                        {player.firstName}\n                      </Link>\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {/* row */}\n              {renderByEpisodeTableRows(players)}\n              {renderTotalTableRow(players)}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    );\n}\n\nexport default TeamStats;","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Players.tsx",["121","122"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Rule from './Rule';\nimport { normalizeEpisodes } from '../utils/sort';\n\n\n// Material UI\nimport Grid from '@material-ui/core/Grid';\nimport Table from \"@material-ui/core/Table\";\n\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\n\nimport { Score, PlayerWithEpisodes } from \"../types/player\";\n\ninterface PlayersProp {\n  userId: string,\n  ruleSet: Score[],\n  leagueId: string,\n}\n\ninterface PlayersParams {\n  episodeId: string\n}\n\nfunction Players({ userId, ruleSet, leagueId }: PlayersProp): JSX.Element {\n    const [players, setPlayers] = useState<PlayerWithEpisodes[]>([]);\n    const [toUpdate, setToUpdate] = useState(false);\n    const { episodeId } = useParams<PlayersParams>();\n      useEffect(() => {\n        const fetchData = async () => {\n          const response = await axios.get(`http://localhost:3000/api/players?leagueId=${leagueId}`);\n\n          const episodeSorted = normalizeEpisodes(response.data, leagueId);\n          setPlayers(episodeSorted);\n        };\n        fetchData();\n      }, [toUpdate, leagueId]);\n      const updateScores = () => {\n        setToUpdate(!toUpdate);\n      }\n\n      const hasRule = (ruleId: string, player: PlayerWithEpisodes) => {\n        return !!getPlayerRuleForEpisode(ruleId, player);\n      }\n\n      const getPlayerRuleForEpisode = (ruleId: string, player: PlayerWithEpisodes) => {\n        const episodeRules = player.sortedScores[`episodeNumber${episodeId}`]; \n        if (!episodeRules) {\n          return null;\n        }\n        return episodeRules.find((cpr) => cpr._id === ruleId);\n      };\n      // const [eliminated, setEliminated] = useState(false);\n      const confirmElimination = async (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n        playerId: string,\n        eliminated: boolean\n      ) => {\n        const body = {\n          eliminated,\n          playerId,\n          epNumber: episodeId,\n          pointValue: 0,\n          text: \"Elimination\",\n          leagueId,\n        };\n        const response = await axios.post(\"/api/players/eliminated\", {\n          ...body,\n        });\n        const normalized = normalizeEpisodes(response.data, leagueId);\n        setPlayers(normalized);\n      };\n      return (\n        <section className=\"players\">\n          <h2>Scoring for Episode {episodeId}</h2>\n          <Grid container spacing={2}>\n            {players.map((player) => {\n              if (player.isEliminated) return;\n              return (\n                <Grid item key={player._id}>\n                  <h3>\n                    {player.firstName}\n                    {player.lastName}\n                  </h3>\n                  <div>\n                    <button\n                      onClick={(e) => confirmElimination(e, player._id, true)}\n                    >\n                      Eliminate?\n                    </button>\n                    <p>\n                      You won't be able to add points after they've been\n                      eliminated!\n                    </p>\n                  </div>\n                  <TableContainer component={Paper}>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>\n                            Points\n                          </TableCell>\n                          <TableCell>\n                            Rule\n                          </TableCell>\n                          <TableCell>\n                            Count\n                          </TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {ruleSet.map((rule) => (\n                          <Rule\n                            hasRule={hasRule(rule._id, player)}\n                            playerRule={getPlayerRuleForEpisode(\n                              rule._id,\n                              player\n                            )}\n                            key={rule.text}\n                            rule={rule}\n                            epNumber={episodeId}\n                            updateScores={updateScores}\n                            playerId={player._id}\n                            leagueId={leagueId}\n                          />\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </Grid>\n              );\n            })}\n          </Grid>\n          <Grid container spacing={2}>\n            {players.map((player) => {\n              if (!player.isEliminated) return;\n              return (\n                <Grid item key={player._id}>\n                  <h3>\n                    {player.firstName}\n                    {player.lastName}\n                  </h3>\n                  <p>Has this player returned?</p>\n                  <div>\n                    <button\n                      onClick={(e) => confirmElimination(e, player._id, false)}\n                    >\n                      Un-eliminate?\n                    </button>\n                  </div>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </section>\n      );\n}\n\nexport default Players;","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/Role.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/types/user.ts",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/EditUser.tsx",[],"/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/components/CreatePlayer.tsx",["123"],"import { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction CreatePlayer(): JSX.Element{\n  const [firstName, setFirstName] = useState<string>('');\n  const [lastName, setLastName] = useState<string>('')\n  const handleSave = async () => {\n    const response = await axios.post('/api/players', {\n      firstName,\n      lastName\n    })\n    console.log(response);\n    setFirstName('')\n    setLastName('');\n  }\n  return (\n    <div>\n      <h2>Create Player</h2>\n      <TextField\n        value={firstName}\n        label=\"First Name\"\n        onChange={(e) => setFirstName(e.target.value)}\n      />\n      <TextField\n      label=\"Last Name\"\n        value={lastName}\n        onChange={(e) => setLastName(e.target.value)}\n      />\n      <Button onClick={handleSave} type=\"button\">Save</Button>\n    </div>\n  );\n}\n\nexport default CreatePlayer;","/Users/taliaharrisonmarcassa/Sites/projects/fantasy/src/hooks/useEpisodes.ts",["124"],"import { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport { episode } from '../types/episodes';\n\nexport function useEpisodes(seasonId: string): episode[] {\n  const [episodes, setEpisodes] = useState<episode[]>([]);\n  useEffect(() => {\n    const fetchEps = async function() {\n      const response = await axios.get(`/api/episode/${seasonId}`);\n      console.log(response);\n      const reversedEpisodes = response.data.episodes.reverse();\n      setEpisodes(reversedEpisodes);\n    }\n    fetchEps();\n  }, []);\n  return episodes;\n}\n",{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":61,"column":6,"nodeType":"131","endLine":61,"endColumn":16,"suggestions":"132"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"133","line":35,"column":6,"nodeType":"131","endLine":35,"endColumn":22,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":54,"column":10,"nodeType":"137","messageId":"138","endLine":54,"endColumn":22},{"ruleId":"129","severity":1,"message":"139","line":77,"column":6,"nodeType":"131","endLine":77,"endColumn":16,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":85,"column":22,"nodeType":"143","messageId":"144","endLine":85,"endColumn":30,"fix":"145"},{"ruleId":"135","severity":1,"message":"146","line":24,"column":10,"nodeType":"137","messageId":"138","endLine":24,"endColumn":17},{"ruleId":"129","severity":1,"message":"147","line":59,"column":8,"nodeType":"131","endLine":59,"endColumn":10,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":85,"column":40,"nodeType":"151","messageId":"152","endLine":85,"endColumn":47},{"ruleId":"149","severity":1,"message":"150","line":143,"column":41,"nodeType":"151","messageId":"152","endLine":143,"endColumn":48},{"ruleId":"135","severity":1,"message":"153","line":1,"column":20,"nodeType":"137","messageId":"138","endLine":1,"endColumn":29},{"ruleId":"129","severity":1,"message":"154","line":16,"column":6,"nodeType":"131","endLine":16,"endColumn":8,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'leagues' and 'teams'. Either include them or remove the dependency array.","ArrayExpression",["158"],"React Hook useEffect has a missing dependency: 'updateUser'. Either include it or remove the dependency array. If 'updateUser' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["159"],"@typescript-eslint/no-unused-vars","'teamEpisodes' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has an unnecessary dependency: 'seasonId'. Either exclude it or remove the dependency array. Outer scope values like 'seasonId' aren't valid dependencies because mutating them doesn't re-render the component.",["160"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"161","text":"162"},"'episode' is defined but never used.","React Hook useEffect has a missing dependency: 'leagueId'. Either include it or remove the dependency array.",["163"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'useEffect' is defined but never used.","React Hook useEffect has a missing dependency: 'seasonId'. Either include it or remove the dependency array.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},[3290,3290],"()",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},"Update the dependencies array to be: [leagueId, leagues, teams]",{"range":"175","text":"176"},"Update the dependencies array to be: [leagueId, updateUser, user]",{"range":"177","text":"178"},"Update the dependencies array to be: []",{"range":"179","text":"180"},"Update the dependencies array to be: [leagueId]",{"range":"181","text":"182"},"Update the dependencies array to be: [seasonId]",{"range":"183","text":"184"},[1849,1859],"[leagueId, leagues, teams]",[1135,1151],"[leagueId, updateUser, user]",[2805,2815],"[]",[2017,2019],"[leagueId]",[523,525],"[seasonId]"]